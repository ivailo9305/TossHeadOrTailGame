
Описание на програмата и начин на работа:




Програмата създава три дъщерни процесса на главния процес чрез функцията fork() и после създава три отделни pipe , за да осъществи комуникация с тях. Всеки от дъщерните процеси затваря канала за четене, изпълнява функцията tossCoins(), която симулира хвърлянето на монети и чрез канала за писане на своя pipe изпраща резултата си към бащиния си процес. След това процесът умира.  Бащиният процес, от своя страна, чака съответния дъщерен процес да се терминира, затваря канала за писане, и чрез канала за четене взима изпратения от дъщерния процес резултат и го записва в променлива, която държи резултата на конкретния дъщерен процес. Когато и трите процеса свършат своята работа, главният процес сравнява резултати им и в случай,  че един от резултати е по-добър от другите програмата изписва резултатите на трите процеса, броят на изиграните игри и съответно победителя. При случай, че трите процеса или два от процесите имат еднакви резултати, а третият резултат е по-малък от другите два, цялата операция се изпълнява отново като този път участват само процесите, които са били с равен резултат.

















Описание на използваните функции:


pid_t fork(void);  - създава дъщерен процес, който се различава от бащиния процес само по PID и PPID. При успешно изпълнение на функцията в бащиния процес се връща PID на новосъздадения дъщерен процес, 0 се връща в дъщерния процес,  а при неуспешно изпълнение на фукнцията се връща -1 в главната нишка, дъщерен процес не се създава.

int pipe( int fd[2] ) – създава pipe, който служи за комуникация между два процеса. Аргументът на фукнцията е масив от два интегера и при успешно изпълнение този масив ще съдържа два нови файл дескриптора който ще се използват за pipeline-а. Връша 0 при успех и -1 при неуспех, fd[0] се използва за четене, а fd[1] – за писане.

int close(int fd) – затваря файлов дескриптор. Връща 0 при успех и -1 при грешка.

ssize_t read(int fd, void *buf, size_t count) – опитва се да чете count на брой байтове от файловия дескрпитор fd и да ги запише в буфера buf. 

ssize_t write(int fd, const void *buf, size_t count); - опитва се да запише count на брой байтове към файла рефериран от файловия дескриптор fd от буфера buf.

wait() – позволява на един процес да изчака докато един от неговите дъщерни процеси промени състоянието си, например се терминира.

exit() – причинява нормално терминиране на процес.

void srand(unsigned int seed)  - използва параметъра seed, за да захрани генераторът на произволни числа използван от функцията rand();

int rand(void)  - връща псведо – произволно число в границите от 0 до  RAND_MAX

int checkResults(int a, int b, int c) – проверява резултатите на играчите след всяка игра. При наличие на победител връща 1, в друг случай връща 0 и при необходимост отстранява даден процес от следващата игра.

Int tossCoins() – симулира хвърлянето на монети. При всяко хвърляне на ези увеличава брояч, а при хвърляне на тура спира изпълнението си и връща брояча на езитата

void play() – функцията, която държи главната функционалост на програмата.
